AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Template for spinning up a DivvyCloud POC. To keep everything contained, this creates its own VPC for the instance and puts the instance in there.'
Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: m5.large
    AllowedValues:
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    ConstraintDescription: Must be a valid EC2 instance type.
  KeyName:
    Description: REQUIRED - Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: ''
  SSHLocation:
    Description: " The IP address range that can be used to SSH to the EC2 instances"
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  RegionMap:
    ap-northeast-1: 
      AMI: ami-0b86ca67cb64addcf
    ap-south-1: 
      AMI: ami-07c128e60e80e6766
    ap-southeast-1: 
      AMI: ami-010162ac5374d76d3
    ca-central-1: 
      AMI: ami-0066a22261093fc7a
    eu-central-1: 
      AMI: ami-083b8eed05b2a7373
    eu-north-1: 
      AMI: ami-851c95fb
    eu-west-1: 
      AMI: ami-01bc69b830b49f729
    sa-east-1: 
      AMI: ami-055021d1882c809af
    us-east-1: 
      AMI: ami-06d990a360d7a793c
    us-west-1: 
      AMI: ami-0f1d0daf2937d0064
    ap-northeast-2: 
      AMI: ami-0a8c567c2272f6d79
    ap-southeast-2: 
      AMI: ami-09e6fd1e6e5bec813
    eu-west-2: 
      AMI: ami-04773891d2d406800
    us-east-2: 
      AMI: ami-0c8b8e32659017cc5
    us-west-2: 
      AMI: ami-0b4a4b368aa8bd6f0
    ap-northeast-3: 
      AMI: ami-0b24e5daf582bdc88
    eu-west-3: 
      AMI: ami-07eba027bc5ec8e27

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.16.0.0/16
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.16.0.0/24
      MapPublicIpOnLaunch: True
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet
      RouteTableId:
        Ref: RouteTable
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
  InboundResponsePortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1'
        To: '65535'
  OutBoundNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1'
        To: '65535'
  SubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: Subnet
      NetworkAclId:
        Ref: NetworkAcl
  DivvyCloudSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Enable SSH access via port 22 and access to the console on 8001
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '8001'
        ToPort: '8001'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: SSHLocation
  EC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Install DivvyCloud software
    Properties:
      ImageId: !FindInMap 
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      SecurityGroupIds:
      - Ref: DivvyCloudSecurityGroup
      SubnetId:
        Ref: Subnet
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      Tags:
        - Key: Name
          Value: DivvyPOC    
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash -v\n"
            - "curl -s https://s3.amazonaws.com/get.divvycloud.com/index.html | sudo bash\n"
            - "sudo echo \"@reboot /usr/local/bin/docker-compose down\" >> /etc/crontab\n"
            - "sudo echo \"@reboot /usr/local/bin/docker-compose -f /divvycloud/docker-compose.yml up -d\" >> /etc/crontab\n"

Outputs:
  URL:
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - EC2Instance
          - PublicIp
        - :8001
    Description: Connect to this URL to log into DivvyCloud (give it a couple minutes to install/boot)
